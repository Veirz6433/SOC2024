// ------------ Approach 1 using two queues --------------------------

class MyStack {
public:

    queue<int> in;
    queue<int> out;
    int peekElement = 0;

    MyStack() {

        
    }
    
    void push(int x) {

        out.push(x);
        while(!in.empty()){
            out.push(in.front());
            in.pop();
        }
        swap(in,out);
        
    }
    
    int pop() {

        int res = in.front();
        in.pop();
        return res;
    }
    
    int top() {

        return in.front();
        
    }
    
    bool empty() {

        return in.empty();
        
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */


// -------------------- Approach 2 using 1 queue -----------------------------

class MyStack {
public:

    queue<int> que;

    MyStack() {
        
    }
    
    void push(int x) {

        que.push(x);

        for(int i = 0; i < que.size() - 1; i++){
            que.push(que.front());
            que.pop();
        }
        
    }
    
    int pop() {

        int r = que.front();
        que.pop();
        return r;
        
    }
    
    int top() {

        return que.front();
        
    }
    
    bool empty() {

        if(que.empty()) return true;
        return false;
        
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
