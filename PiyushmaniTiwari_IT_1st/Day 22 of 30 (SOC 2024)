//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Item {
    int value;
    int weight;
};


// } Driver Code Ends
// class implemented
/*
struct Item{
    int value;
    int weight;
};
*/

class Solution {
  public:
    // Function to get the maximum total value in the knapsack.
      static bool cmp (const Item &a, const Item &b) {
        double value1 = (double)a.value / (double)a.weight;
        double value2 = (double)b.value / (double)b.weight;
        
        return value1 > value2;
      }
       double fractionalKnapsack(int W, Item arr[], int n)
    {
        // Your code here
        /*  this is a greedy problem for sure the thing is we have to sort the weighttage values in descending
        and pick from left to right and make the ans maximum as possible , to get the highest 
        max optimization problem   */
        double maximumValue = 0;
        
        sort(arr, arr + n, cmp);
        
        for (int i = 0; i < n; i++) {
            //if we can take the weight completely
            if (arr[i].weight <= W)
            {
                W -= arr[i].weight;
                maximumValue += (arr[i].value);
            }
            else {
                /* this block will only occur when weight is greater than available knapsack so it means
                  after this knapsack won't have any space 
                  so break  */
                maximumValue += (arr[i].value * ((double)W / (double)arr[i].weight));
                break;
            }
        }
        
        return maximumValue;
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    // taking testcases
    cin >> t;
    cout << setprecision(6) << fixed;
    while (t--) {
        // size of array and weight
        int n, W;
        cin >> n >> W;

        Item arr[n];
        // value and weight of each item
        for (int i = 0; i < n; i++) {
            cin >> arr[i].value >> arr[i].weight;
        }

        // function call
        Solution ob;
        cout << ob.fractionalKnapsack(W, arr, n) << endl;
    }
    return 0;
}
// } Driver Code Ends
